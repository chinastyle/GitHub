// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectServerResp.proto

package com.aspire.mose.protocol.handshake;

public final class MsgConnectServerResp {
  private MsgConnectServerResp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ConnectServerRespOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .protocol.ProtocolRetCode RetResult = 1;
    boolean hasRetResult();
    com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode getRetResult();
    
    // required string SessionId = 2;
    boolean hasSessionId();
    String getSessionId();
    
    // required bool IsEncrypt = 3;
    boolean hasIsEncrypt();
    boolean getIsEncrypt();
    
    // required bool IsNeedVerify = 4;
    boolean hasIsNeedVerify();
    boolean getIsNeedVerify();
    
    // required uint32 ServerRandomNum = 5;
    boolean hasServerRandomNum();
    int getServerRandomNum();
    
    // required uint32 UseSemCrypMeth = 6;
    boolean hasUseSemCrypMeth();
    int getUseSemCrypMeth();
    
    // required uint32 UseAsemCrypMeth = 7;
    boolean hasUseAsemCrypMeth();
    int getUseAsemCrypMeth();
    
    // required uint32 UseDigestMeth = 8;
    boolean hasUseDigestMeth();
    int getUseDigestMeth();
  }
  public static final class ConnectServerResp extends
      com.google.protobuf.GeneratedMessageLite
      implements ConnectServerRespOrBuilder {
    // Use ConnectServerResp.newBuilder() to construct.
    private ConnectServerResp(Builder builder) {
      super(builder);
    }
    private ConnectServerResp(boolean noInit) {}
    
    private static final ConnectServerResp defaultInstance;
    public static ConnectServerResp getDefaultInstance() {
      return defaultInstance;
    }
    
    public ConnectServerResp getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required .protocol.ProtocolRetCode RetResult = 1;
    public static final int RETRESULT_FIELD_NUMBER = 1;
    private com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode retResult_;
    public boolean hasRetResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode getRetResult() {
      return retResult_;
    }
    
    // required string SessionId = 2;
    public static final int SESSIONID_FIELD_NUMBER = 2;
    private java.lang.Object sessionId_;
    public boolean hasSessionId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getSessionId() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          sessionId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getSessionIdBytes() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required bool IsEncrypt = 3;
    public static final int ISENCRYPT_FIELD_NUMBER = 3;
    private boolean isEncrypt_;
    public boolean hasIsEncrypt() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public boolean getIsEncrypt() {
      return isEncrypt_;
    }
    
    // required bool IsNeedVerify = 4;
    public static final int ISNEEDVERIFY_FIELD_NUMBER = 4;
    private boolean isNeedVerify_;
    public boolean hasIsNeedVerify() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public boolean getIsNeedVerify() {
      return isNeedVerify_;
    }
    
    // required uint32 ServerRandomNum = 5;
    public static final int SERVERRANDOMNUM_FIELD_NUMBER = 5;
    private int serverRandomNum_;
    public boolean hasServerRandomNum() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getServerRandomNum() {
      return serverRandomNum_;
    }
    
    // required uint32 UseSemCrypMeth = 6;
    public static final int USESEMCRYPMETH_FIELD_NUMBER = 6;
    private int useSemCrypMeth_;
    public boolean hasUseSemCrypMeth() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getUseSemCrypMeth() {
      return useSemCrypMeth_;
    }
    
    // required uint32 UseAsemCrypMeth = 7;
    public static final int USEASEMCRYPMETH_FIELD_NUMBER = 7;
    private int useAsemCrypMeth_;
    public boolean hasUseAsemCrypMeth() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getUseAsemCrypMeth() {
      return useAsemCrypMeth_;
    }
    
    // required uint32 UseDigestMeth = 8;
    public static final int USEDIGESTMETH_FIELD_NUMBER = 8;
    private int useDigestMeth_;
    public boolean hasUseDigestMeth() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getUseDigestMeth() {
      return useDigestMeth_;
    }
    
    private void initFields() {
      retResult_ = com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode.SUCCESS;
      sessionId_ = "";
      isEncrypt_ = false;
      isNeedVerify_ = false;
      serverRandomNum_ = 0;
      useSemCrypMeth_ = 0;
      useAsemCrypMeth_ = 0;
      useDigestMeth_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasRetResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSessionId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsEncrypt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsNeedVerify()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerRandomNum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUseSemCrypMeth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUseAsemCrypMeth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUseDigestMeth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, retResult_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getSessionIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isEncrypt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isNeedVerify_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, serverRandomNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, useSemCrypMeth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, useAsemCrypMeth_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, useDigestMeth_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, retResult_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getSessionIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isEncrypt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isNeedVerify_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, serverRandomNum_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, useSemCrypMeth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, useAsemCrypMeth_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, useDigestMeth_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp, Builder>
        implements com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerRespOrBuilder {
      // Construct using com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        retResult_ = com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode.SUCCESS;
        bitField0_ = (bitField0_ & ~0x00000001);
        sessionId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        isEncrypt_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        isNeedVerify_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        serverRandomNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        useSemCrypMeth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        useAsemCrypMeth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        useDigestMeth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp getDefaultInstanceForType() {
        return com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp.getDefaultInstance();
      }
      
      public com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp build() {
        com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp buildPartial() {
        com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp result = new com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.retResult_ = retResult_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sessionId_ = sessionId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isEncrypt_ = isEncrypt_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isNeedVerify_ = isNeedVerify_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.serverRandomNum_ = serverRandomNum_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.useSemCrypMeth_ = useSemCrypMeth_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.useAsemCrypMeth_ = useAsemCrypMeth_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.useDigestMeth_ = useDigestMeth_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp other) {
        if (other == com.aspire.mose.protocol.handshake.MsgConnectServerResp.ConnectServerResp.getDefaultInstance()) return this;
        if (other.hasRetResult()) {
          setRetResult(other.getRetResult());
        }
        if (other.hasSessionId()) {
          setSessionId(other.getSessionId());
        }
        if (other.hasIsEncrypt()) {
          setIsEncrypt(other.getIsEncrypt());
        }
        if (other.hasIsNeedVerify()) {
          setIsNeedVerify(other.getIsNeedVerify());
        }
        if (other.hasServerRandomNum()) {
          setServerRandomNum(other.getServerRandomNum());
        }
        if (other.hasUseSemCrypMeth()) {
          setUseSemCrypMeth(other.getUseSemCrypMeth());
        }
        if (other.hasUseAsemCrypMeth()) {
          setUseAsemCrypMeth(other.getUseAsemCrypMeth());
        }
        if (other.hasUseDigestMeth()) {
          setUseDigestMeth(other.getUseDigestMeth());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasRetResult()) {
          
          return false;
        }
        if (!hasSessionId()) {
          
          return false;
        }
        if (!hasIsEncrypt()) {
          
          return false;
        }
        if (!hasIsNeedVerify()) {
          
          return false;
        }
        if (!hasServerRandomNum()) {
          
          return false;
        }
        if (!hasUseSemCrypMeth()) {
          
          return false;
        }
        if (!hasUseAsemCrypMeth()) {
          
          return false;
        }
        if (!hasUseDigestMeth()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode value = com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                retResult_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              sessionId_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isEncrypt_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isNeedVerify_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              serverRandomNum_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              useSemCrypMeth_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              useAsemCrypMeth_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              useDigestMeth_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .protocol.ProtocolRetCode RetResult = 1;
      private com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode retResult_ = com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode.SUCCESS;
      public boolean hasRetResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode getRetResult() {
        return retResult_;
      }
      public Builder setRetResult(com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        retResult_ = value;
        
        return this;
      }
      public Builder clearRetResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        retResult_ = com.aspire.mose.protocol.handshake.MsgProtocolRetCode.ProtocolRetCode.SUCCESS;
        
        return this;
      }
      
      // required string SessionId = 2;
      private java.lang.Object sessionId_ = "";
      public boolean hasSessionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getSessionId() {
        java.lang.Object ref = sessionId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          sessionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setSessionId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        sessionId_ = value;
        
        return this;
      }
      public Builder clearSessionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sessionId_ = getDefaultInstance().getSessionId();
        
        return this;
      }
      void setSessionId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        sessionId_ = value;
        
      }
      
      // required bool IsEncrypt = 3;
      private boolean isEncrypt_ ;
      public boolean hasIsEncrypt() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public boolean getIsEncrypt() {
        return isEncrypt_;
      }
      public Builder setIsEncrypt(boolean value) {
        bitField0_ |= 0x00000004;
        isEncrypt_ = value;
        
        return this;
      }
      public Builder clearIsEncrypt() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isEncrypt_ = false;
        
        return this;
      }
      
      // required bool IsNeedVerify = 4;
      private boolean isNeedVerify_ ;
      public boolean hasIsNeedVerify() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public boolean getIsNeedVerify() {
        return isNeedVerify_;
      }
      public Builder setIsNeedVerify(boolean value) {
        bitField0_ |= 0x00000008;
        isNeedVerify_ = value;
        
        return this;
      }
      public Builder clearIsNeedVerify() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isNeedVerify_ = false;
        
        return this;
      }
      
      // required uint32 ServerRandomNum = 5;
      private int serverRandomNum_ ;
      public boolean hasServerRandomNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getServerRandomNum() {
        return serverRandomNum_;
      }
      public Builder setServerRandomNum(int value) {
        bitField0_ |= 0x00000010;
        serverRandomNum_ = value;
        
        return this;
      }
      public Builder clearServerRandomNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        serverRandomNum_ = 0;
        
        return this;
      }
      
      // required uint32 UseSemCrypMeth = 6;
      private int useSemCrypMeth_ ;
      public boolean hasUseSemCrypMeth() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getUseSemCrypMeth() {
        return useSemCrypMeth_;
      }
      public Builder setUseSemCrypMeth(int value) {
        bitField0_ |= 0x00000020;
        useSemCrypMeth_ = value;
        
        return this;
      }
      public Builder clearUseSemCrypMeth() {
        bitField0_ = (bitField0_ & ~0x00000020);
        useSemCrypMeth_ = 0;
        
        return this;
      }
      
      // required uint32 UseAsemCrypMeth = 7;
      private int useAsemCrypMeth_ ;
      public boolean hasUseAsemCrypMeth() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getUseAsemCrypMeth() {
        return useAsemCrypMeth_;
      }
      public Builder setUseAsemCrypMeth(int value) {
        bitField0_ |= 0x00000040;
        useAsemCrypMeth_ = value;
        
        return this;
      }
      public Builder clearUseAsemCrypMeth() {
        bitField0_ = (bitField0_ & ~0x00000040);
        useAsemCrypMeth_ = 0;
        
        return this;
      }
      
      // required uint32 UseDigestMeth = 8;
      private int useDigestMeth_ ;
      public boolean hasUseDigestMeth() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getUseDigestMeth() {
        return useDigestMeth_;
      }
      public Builder setUseDigestMeth(int value) {
        bitField0_ |= 0x00000080;
        useDigestMeth_ = value;
        
        return this;
      }
      public Builder clearUseDigestMeth() {
        bitField0_ = (bitField0_ & ~0x00000080);
        useDigestMeth_ = 0;
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:protocol.ConnectServerResp)
    }
    
    static {
      defaultInstance = new ConnectServerResp(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:protocol.ConnectServerResp)
  }
  
  
  static {
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
